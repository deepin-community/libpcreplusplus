.TH "pcrepp::Pcre" 3 "25 Aug 2004" "PCRE++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
pcrepp::Pcre \- 
.SH SYNOPSIS
.br
.PP
\fC#include <pcre++.h>\fP
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBPcre\fP ()"
.br
.ti -1c
.RI "\fBPcre\fP (const std::string &expression)"
.br
.ti -1c
.RI "\fBPcre\fP (const std::string &expression, const std::string &flags)"
.br
.ti -1c
.RI "\fBPcre\fP (const std::string &expression, unsigned int flags)"
.br
.ti -1c
.RI "\fBPcre\fP (const Pcre &P)"
.br
.ti -1c
.RI "const Pcre & \fBoperator=\fP (const std::string &expression)"
.br
.ti -1c
.RI "const Pcre & \fBoperator=\fP (const Pcre &P)"
.br
.ti -1c
.RI "\fB~Pcre\fP ()"
.br
.ti -1c
.RI "bool \fBsearch\fP (const std::string &stuff)"
.br
.ti -1c
.RI "bool \fBsearch\fP (const std::string &stuff, int OffSet)"
.br
.ti -1c
.RI "std::vector< std::string > * \fBget_sub_strings\fP () const"
.br
.ti -1c
.RI "std::string \fBget_match\fP (int pos) const"
.br
.ti -1c
.RI "int \fBget_match_start\fP (int pos) const"
.br
.ti -1c
.RI "int \fBget_match_end\fP (int pos) const"
.br
.ti -1c
.RI "int \fBget_match_start\fP () const"
.br
.ti -1c
.RI "int \fBget_match_end\fP () const"
.br
.ti -1c
.RI "size_t \fBget_match_length\fP (int pos) const"
.br
.ti -1c
.RI "bool \fBmatched\fP () const"
.br
.ti -1c
.RI "int \fBmatches\fP () const"
.br
.ti -1c
.RI "std::vector< std::string > \fBsplit\fP (const std::string &piece)"
.br
.ti -1c
.RI "std::vector< std::string > \fBsplit\fP (const std::string &piece, int limit)"
.br
.ti -1c
.RI "std::vector< std::string > \fBsplit\fP (const std::string &piece, int limit, int start_offset)"
.br
.ti -1c
.RI "std::vector< std::string > \fBsplit\fP (const std::string &piece, int limit, int start_offset, int end_offset)"
.br
.ti -1c
.RI "std::vector< std::string > \fBsplit\fP (const std::string &piece, std::vector< int > positions)"
.br
.ti -1c
.RI "std::string \fBreplace\fP (const std::string &piece, const std::string &with)"
.br
.ti -1c
.RI "pcre * \fBget_pcre\fP ()"
.br
.ti -1c
.RI "pcre_extra * \fBget_pcre_extra\fP ()"
.br
.ti -1c
.RI "void \fBstudy\fP ()"
.br
.ti -1c
.RI "bool \fBsetlocale\fP (const char *locale)"
.br
.ti -1c
.RI "std::string \fBoperator[]\fP (int index)"
.br
.in -1c
.SH "Detailed Description"
.PP 
The \fBPcre\fP class is a wrapper around the PCRE library.
.PP
The library 'pcre++' defines a class named 'Pcre' which you can use to search in strings using reular expressions as well as getting matched sub strings. It does currently not support all features, which the underlying PCRE library provides, but the most important stuff is implemented.
.PP
Please study this example code to learn how to use this class: 
.PP
.nf
/*
 *
 *  This file  is part of the PCRE++ Class Library.
 *
 *  By  accessing  this software,  PCRE++, you  are  duly informed
 *  of and agree to be  bound  by the  conditions  described below
 *  in this notice:
 *
 *  This software product,  PCRE++,  is developed by Thomas Linden
 *  and  copyrighted (C) 2002  by  Thomas Linden,  with all rights 
 *  reserved.
 *
 *  There  is no charge for PCRE++ software.  You can redistribute
 *  it and/or modify it under the terms of the GNU  Lesser General
 *  Public License, which is incorporated by reference herein.
 *
 *  PCRE++ is distributed WITHOUT ANY WARRANTY, IMPLIED OR EXPRESS,
 *  OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE or that
 *  the use of it will not infringe on any third party's intellec-
 *  tual property rights.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with PCRE++.  Copies can also be obtained from:
 *
 *    http://www.gnu.org/licenses/lgpl.txt
 *
 *  or by writing to:
 *
 *  Free Software Foundation, Inc.
 *  59 Temple Place, Suite 330
 *  Boston, MA 02111-1307
 *  USA
 *
 *  Or contact:
 *
 *   'Thomas Linden' <tom@daemon.de>
 *
 *
 */


/* you need to include the pcre++ header file */
#include '../libpcre++/pcre++.h'
#include <iostream>

using namespace std;
using namespace pcrepp;

/* A typedef for a vector of strings (as returned by split() )*/
typedef std::vector<std::string> Array;

/* A typedef for a vector iterator */
typedef std::vector<std::string>::iterator ArrayIterator;

void regex() {
    /*
     * define a string with a regular expression
     */
    string expression = '([a-z]*) ([0-9]+)';

    /*
     * this is the string in which we want to search
     */
    string stuff = 'hallo 11 robert';

    cout << '  searching in \'' << stuff << '\' for regex \''
         << expression << '\':' << endl;

    /*
     * Create a new Pcre object, search case-insensitive ('i')
     */
    Pcre reg(expression, 'i');
    
    /*
     * see if the expression matched
     */
    if(reg.search(stuff) == true) {

      /*
       * see if the expression generated any substrings
       */
      if(reg.matches() >= 1) {

        /*
         * print out the number of substrings
         */
        cout << '  generated ' << reg.matches() << ' substrings:' << endl;
          
        /*
         * iterate over the matched sub strings
         */
        for(int pos=0; pos < reg.matches(); pos++) {
          /* print out each substring */
          cout << '  substring ' << pos << ': ' << reg[pos];   // also possible: reg.get_match(pos);
          /* print out the start/end offset of the current substring
           * within the searched string(stuff)
           */
          cout << ' (start: ' << reg.get_match_start(pos) << ', end: '
               << reg.get_match_end(pos) << ')' << endl;
        }
      }
      else {
        /*
         * we had a match, but it generated no substrings, for whatever reason
         */
        cout << '   it matched, but there where no substrings.' << endl;
      }
    }
    else {
      /*
       * no match at all
       */
      cout << '   didn't match.' << endl;
    }
}



void replace() {
    /*
     * Sample of replace() usage
     */
    string orig = 'Hans ist 22 Jahre alt. Er ist 8 Jahre älter als Fred.';
    cout << '   orig: ' << orig << endl;

    /*
     * define a regex for digits (character class)
     */
    Pcre p(' ([0-9]+) ');

    /*
     * replace the 1st occurence of [0-9]+ with 'zweiundzwanzig'
     */
    string n = p.replace(orig, ' zweiundzwanzig($1) ');

    /*
     * prints out: 'Hans ist zweiundzwanzig Jahre alt. Er ist 8 Jahre älter
     * als Fred.'
     */
    cout << '   new: ' << n << endl; 
}


void replace_multi() {
  /*
   * Sample of replace() usage with multiple substrings
   */
  string orig = ' 08:23 ';
  cout << '   orig: ' << orig << endl;
  
  /*
   * create regex which, if it matches, creates 3 substrings
   */
  Pcre reg(' ([0-9]+)(:)([0-9]+) ', 'sig');

  /*
   * remove $2 (':')
   * re-use $1 ('08') and $3 ('23') in the replace string
   */
  string n  = reg.replace(orig, '$1 Stunden und $3 Minuten');

  /*
   * prints the result: '08 Stunden und 23 Minuten'
   */
  cout << '   new:  ' << n  << endl;
}


void normalize() {
  /*
   * another sample to check if normalizing using replace() works
   */
  string orig = 'Heute   ist ein  schoener  Tag        gell?';
  cout << '   orig: ' << orig << endl;

  /*
   * create regex for normalizing whitespace
   */
  Pcre reg('[\\s]+', 'gs');

  /*
   * do the normalizing process
   */
  string n = reg.replace(orig, ' ');

  /*
   * prints the result, should be: 'Heute ist ein schoener Tag , gell?'
   */
  cout << '   new:  ' << n  << endl;
}


void split() {
  /*
   * Sample of split() usage
   */
      string sp_orig = 'was21willst2387461du3alter!';
      cout << '   orig: ' << sp_orig << endl;

      /*
       * define a regex for digits (character class)
       */
      string delimiter = '[0-9]+';

      /*
       * new Pcre object, match globally ('g' flag)
       */
      Pcre S(delimiter, 'g');

      /*
       * split 'was21willst2387461du3alter!' by digits
       */
      Array splitted = S.split(sp_orig);
      
      /*
       * iterate over the resulting list
       */
      cout << '   splitted: ';
      for(ArrayIterator A = splitted.begin(); A != splitted.end(); ++A)
        cout << *A << ' ';
      cout << endl;
}


void ex() {
  /*
   * Pcre::exception Test
   */
  
  /*
   * this will generate only one substring, 'This'
   */
  Pcre ex('([a-z]+)', 'i');
  if(ex.search('This is a test.')) {
    cout << '  trying to access a non-existing substring:' << endl;
    cout << '  substring 2: ' << ex.get_match(1) << endl; 
  }
}


void mycopy() {
  /*
   * Sample use of copy contsructor and operator=
   */
    cout << '  initializing reg1(([a-z]+?)' << endl;
    Pcre reg1('^([a-z]+?)');

    /*
     * create an empty Pcre objects
     */
    Pcre reg2;
    
    /*
     * copy reg1 to reg2 (operator=)
     */
    cout << '  copying reg1 to new Pcre object reg2' << endl;
    reg2 = reg1;

    /*
     * using the copy constructor to initialize the 3rd object
     */
    cout << '  creating a new Pcre object reg3 from reg2' << endl;
    Pcre reg3(reg2);

    /*
     * doing regular stuff on reg3
     */
    if(reg3.search('anton'))
      cout << '  string 'anton' matched using reg3 object' << endl;
}

void multisearch() {
  Pcre reg('([^\\n]+\\n)');
  string str = '\nline1\nline2\nline3\n';
  size_t pos = 0;

  while (pos <= str.length()) {
    if( reg.search(str, pos)) {
      pos = reg.get_match_end(0);
      cout << '   pos: ' << pos << ' match: ' << reg.get_match(0);
    }
    else
      break;
  }
}

int main() {
  /* 
   * the Pcre class throws errors via exceptions
   */
  try {
    cout << endl << 'SEARCH() sample:' << endl;
    regex();

    cout << endl << 'REPLACE() sample:' << endl;
    replace();

    cout << endl << 'Multiple REPLACE() sample:' << endl;
    replace_multi();

    cout << endl << 'Normalizing REPLACE() sample:' << endl;
    normalize();

    cout << endl << 'SPLIT() sample:' << endl;
    split();

    cout << endl << 'COPY+Operator sample:' << endl;
    mycopy();

    cout << endl << 'Multi line search test:' << endl;
    multisearch();

    cout << endl << 'Pcre::exception test:' << endl;
    ex();

    exit(0);
  }
  catch (Pcre::exception &E) {
    /*
     * the Pcre class has thrown an exception
     */
    cerr << 'Pcre++ error: ' << E.what() << endl;
    exit(-1);
  }
  exit(0);
}
  

.PP
.PP
Compile your programs which use the prce++ class using the following command line: 
.PP
.nf

   g++ -c yourcode.o `pcre-config --cflags` `pcre++-config --cflags`
   g++ yourcode.o `pcre-config --libs` `pcre++-config --libs` -o yourprogram
 

.PP
.PP
If you want to learn more about regular expressions which can be used with pcre++, then please read the following documentation: \fCperlre - Perl regular expressions\fP
.PP
The pcre library itself does also contain some usefull documentation, which maybe interesting for you: \fCPCRE manual page\fP 
.PP
Definition at line 99 of file pcre++.h.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Pcre::Pcre ()"
.PP
Empty Constructor. Create a new empty \fBPcre\fP object. This is the simplest constructor available, you might consider one of the other constructors as a better solution. You need to initialize thie \fBPcre\fP object, if you use the empty constructor. You can use one of the two available operator= operators to assign it an expression or a \fBPcre\fP copy.
.PP
\fBReturns:\fP
.RS 4
A new empty \fBPcre\fP object 
.RE
.PP
Definition at line 107 of file pcre++.cc.
.SS "Pcre::Pcre (const std::string & expression)"
.PP
Constructor. Compile the given pattern. An \fBPcre\fP object created this way can be used multiple times to do searches.
.PP
\fBParameters:\fP
.RS 4
\fIexpression\fP a string, which must be a valid perl regular expression. 
.RE
.PP
\fBReturns:\fP
.RS 4
A new \fBPcre\fP object, which holds te compiled pattern. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBPcre(const std::string& expression, const std::string& flags)\fP 
.PP
\fBPcre(const std::string& expression, unsigned int flags)\fP 
.RE
.PP
Definition at line 50 of file pcre++.cc.
.SS "Pcre::Pcre (const std::string & expression, const std::string & flags)"
.PP
Constructor. Compile the given pattern. An \fBPcre\fP object created this way can be used multiple times to do searches.
.PP
\fBParameters:\fP
.RS 4
\fIexpression\fP a string, which must be a valid perl regular expression. 
.br
\fIflags\fP can be one or more of the following letters:
.RE
.PP
.IP "\(bu" 2
\fBi\fP Search case insensitive.
.PP
.PP
.IP "\(bu" 2
\fBm\fP Match on multiple lines, thus ^ and $ are interpreted as the start and end of the entire string, not of a single line.
.PP
.PP
.IP "\(bu" 2
\fBs\fP A dot in an expression matches newlines too(which is normally not the case).
.PP
.PP
.IP "\(bu" 2
\fBx\fP Whitespace characters will be ignored (except within character classes or if escaped).
.PP
.PP
.IP "\(bu" 2
\fBg\fP Match multiple times. This flags affects only the behavior of the \fBreplace(const std::string& piece, const std::string& with)\fP method.
.PP
.PP
\fBReturns:\fP
.RS 4
A new \fBPcre\fP object, which holds te compiled pattern. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBPcre(const std::string& expression)\fP 
.PP
\fBPcre(const std::string& expression, unsigned int flags)\fP 
.RE
.PP
Definition at line 59 of file pcre++.cc.
.SS "Pcre::Pcre (const std::string & expression, unsigned int flags)"
.PP
Constructor. Compile the given pattern. An \fBPcre\fP object created this way can be used multiple times to do searches.
.PP
\fBParameters:\fP
.RS 4
\fIexpression\fP a string, which must be a valid perl regular expression. 
.br
\fIflags\fP option bits can be one or more of the following bits:
.RE
.PP
.IP "\(bu" 2
PCRE_ANCHORED anchored pattern.
.IP "\(bu" 2
PCRE_CASELESS case insensitive search.
.IP "\(bu" 2
PCRE_DOLLAR_ENDONLY dollar sign matches only at end.
.IP "\(bu" 2
PCRE_DOTALL newline is contained in .
.IP "\(bu" 2
PCRE_EXTENDED whitespace characters will be ignored.
.IP "\(bu" 2
PCRE_EXTRA use perl incompatible pcre extensions.
.IP "\(bu" 2
PCRE_MULTILINE match on multiple lines.
.IP "\(bu" 2
PCRE_NO_AUTO_CAPTURE disable the use of numbered capturing parentheses in the pattern.
.IP "\(bu" 2
PCRE_UNGREEDY qunatifiers behave not greedy by default.
.IP "\(bu" 2
PCRE_UTF8 use utf8 support.
.IP "\(bu" 2
PCRE_GLOBAL (PCRE++ internal flag) match multiple times used only in the \fBreplace(const std::string& piece, const std::string& with)\fP method.
.PP
.PP
\fBReturns:\fP
.RS 4
A new \fBPcre\fP object, which holds te compiled pattern. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBPcre(const std::string& expression)\fP 
.PP
\fBPcre(const std::string& expression, const std::string& flags)\fP 
.PP
pcreapi(3) manpage 
.RE
.PP
Definition at line 80 of file pcre++.cc.
.PP
References PCRE_GLOBAL.
.SS "Pcre::Pcre (const Pcre & P)"
.PP
Copy Constructor Creates a new \fBPcre\fP object of an existing one. 
.PP
\fBParameters:\fP
.RS 4
\fIP\fP an existing \fBPcre\fP object. 
.RE
.PP
\fBReturns:\fP
.RS 4
A new \fBPcre\fP object, which holds te compiled pattern. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBPcre(const std::string& expression)\fP 
.PP
\fBPcre(const std::string& expression, const std::string& flags)\fP 
.RE
.PP
Definition at line 97 of file pcre++.cc.
.PP
References _expression, _flags, _have_paren, case_t, and global_t.
.SS "Pcre::~Pcre ()"
.PP
Destructor. The desturcor will automatically invoked if the object is no more used. It frees all the memory allocated by pcre++. Definition at line 120 of file pcre++.cc.
.SH "Member Function Documentation"
.PP 
.SS "string Pcre::get_match (int pos) const"
.PP
Get a substring at a known position. This method throws an out-of-range exception if the given position is invalid. 
.PP
\fBParameters:\fP
.RS 4
\fIpos\fP the position of the substring to return. Identical to perl's $1..$n. 
.RE
.PP
\fBReturns:\fP
.RS 4
the substring at the given position.
.RE
.PP
Example: 
.PP
.nf

 
 std::string mysub = regex.get_match(1); 
 
 

.PP
Get the first substring that matched the expression in the 'regex' object. 
.PP
Definition at line 60 of file get.cc.
.PP
Referenced by operator[]().
.SS "int Pcre::get_match_end () const"
.PP
Get the end position of the entire match within the searched string. This method returns the character position of the last character of the entire match within the searched string. 
.PP
\fBReturns:\fP
.RS 4
the integer character position of the last character of the entire match.
.RE
.PP
Example: 
.PP
.nf


 Pcre regex('([0-9]+)\s([a-z]+)');     // search for the date(makes 2 substrings
 regex.search('The 11th september.');  // do the search on this string
 int pos = regex.get_match_end();      // returns 17, because '11th september', which is
                                           // the entire match, ends at the
                                       // 17th character inside the search string.

 

.PP
\fBSee also:\fP
.RS 4
int \fBget_match_start()\fP 
.PP
int get_match_start(int pos) 
.PP
int get_match_end(int pos) 
.RE
.PP

.PP
Definition at line 77 of file get.cc.
.PP
Referenced by replace().
.SS "int Pcre::get_match_end (int pos) const"
.PP
Get the end position of a substring within the searched string. This method returns the character position of the last character of a substring withing the searched string. 
.PP
\fBParameters:\fP
.RS 4
\fIpos\fP the position of the substring. Identical to perl's $1..$n. 
.RE
.PP
\fBReturns:\fP
.RS 4
the integer character position of the last character of a substring. Positions are starting at 0.
.RE
.PP
Example: 
.PP
.nf


 Pcre regex('([0-9]+)');               // search for numerical characters
 regex.search('The 11th september.');  // do the search on this string
 std::string day = regex.get_match(1);      // returns '11'
 int pos = regex.get_match_end(1);     // returns 5, because '11' ends at the
                                       // 5th character inside the search string.

 

.PP
\fBSee also:\fP
.RS 4
int get_match_start(int pos) 
.PP
int \fBget_match_start()\fP 
.PP
int \fBget_match_end()\fP 
.RE
.PP

.PP
Definition at line 96 of file get.cc.
.SS "size_t Pcre::get_match_length (int pos) const"
.PP
Get the length of a substring at a known position. This method throws an out-of-range exception if the given position is invalid. 
.PP
\fBParameters:\fP
.RS 4
\fIpos\fP the position of the substring-length to return. Identical to perl's $1..$n. 
.RE
.PP
\fBReturns:\fP
.RS 4
the length substring at the given position. 
.RE
.PP
Definition at line 110 of file get.cc.
.SS "int Pcre::get_match_start () const"
.PP
Get the start position of the entire match within the searched string. This method returns the character position of the first character of the entire match within the searched string. 
.PP
\fBReturns:\fP
.RS 4
the integer character position of the first character of the entire match.
.RE
.PP
Example: 
.PP
.nf


 Pcre regex('([0-9]+)\s([a-z]+)');     // search for the date(makes 2 substrings
 regex.search('The 11th september.');  // do the search on this string
 int pos = regex.get_match_start();    // returns 4, because '11th september' begins at the
                                       // 4th character inside the search string.

 

.PP
\fBSee also:\fP
.RS 4
int get_match_start(int pos) 
.PP
int get_match_end(int pos) 
.PP
int \fBget_match_end()\fP 
.RE
.PP

.PP
Definition at line 70 of file get.cc.
.PP
Referenced by replace().
.SS "int Pcre::get_match_start (int pos) const"
.PP
Get the start position of a substring within the searched string. This method returns the character position of the first character of a substring withing the searched string. 
.PP
\fBParameters:\fP
.RS 4
\fIpos\fP the position of the substring. Identical to perl's $1..$n. 
.RE
.PP
\fBReturns:\fP
.RS 4
the integer character position of the first character of a substring. Positions are starting at 0.
.RE
.PP
Example: 
.PP
.nf

 
 Pcre regex('([0-9]+)');               // search for numerical characters
 regex.search('The 11th september.');  // do the search on this string
 std::string day = regex.get_match(1);      // returns '11'
 int pos = regex.get_match_start(1);   // returns 4, because '11' begins at the
                                       // 4th character inside the search string.

 

.PP
\fBSee also:\fP
.RS 4
int get_match_end(int pos) 
.PP
int \fBget_match_end()\fP 
.PP
int \fBget_match_start()\fP 
.RE
.PP

.PP
Definition at line 84 of file get.cc.
.SS "pcre * Pcre::get_pcre ()"
.PP
Return pointer to underlying pcre object. The pcre object allows you to access the pcre API directly. E.g. if your are using pcre version 4.x and want to use the new functionality which is currently not supported by pcre++. An example would be: pcre_fullinfo(), pcre_study() or the callout functionality.
.PP
\fBReturns:\fP
.RS 4
'pcre*' pointer to pcre object. 
.RE
.PP
\fBSee also:\fP
.RS 4
man pcre 
.PP
pcre_extra* \fBget_pcre_extra()\fP 
.RE
.PP
Definition at line 195 of file pcre++.cc.
.SS "pcre_extra * Pcre::get_pcre_extra ()"
.PP
Return pointer to underlying pcre_extra structure. The returned pcre_extra structure can be used in conjunction with the pcre* object returned by pcre().
.PP
\fBReturns:\fP
.RS 4
'pcre_extra*' pointer to pcre_extra structure. 
.RE
.PP
\fBSee also:\fP
.RS 4
pcre* \fBget_pcre()\fP 
.RE
.PP
Definition at line 199 of file pcre++.cc.
.SS "vector< string > * Pcre::get_sub_strings () const"
.PP
Return a vector of substrings, if any. 
.PP
\fBReturns:\fP
.RS 4
a pointer to an std::vector<std::string>, which may be NULL, if no substrings has been found. 
.RE
.PP
\fBSee also:\fP
.RS 4
std::vector<std::string> 
.RE
.PP
Definition at line 53 of file get.cc.
.SS "bool pcrepp::Pcre::matched () const\fC [inline]\fP"
.PP
Test if a search was successfull. This method must be invoked \fBafter\fP calling \fBsearch()\fP. 
.PP
\fBReturns:\fP
.RS 4
boolean \fBtrue\fP if the search was successfull at all, or \fBfalse\fP if not. 
.RE
.PP
Definition at line 444 of file pcre++.h.
.PP
Referenced by replace().
.SS "int pcrepp::Pcre::matches () const\fC [inline]\fP"
.PP
Get the number of substrings generated by pcre++. 
.PP
\fBReturns:\fP
.RS 4
the number of substrings generated by pcre++. 
.RE
.PP
Definition at line 449 of file pcre++.h.
.PP
Referenced by replace().
.SS "const Pcre & Pcre::operator= (const Pcre & P)"
.PP
Operator =. 
.PP
\fBParameters:\fP
.RS 4
\fI&P\fP an \fBPcre\fP object 
.RE
.PP
\fBReturns:\fP
.RS 4
a new \fBPcre\fP object
.RE
.PP
Example:
.PP
.PP
.nf

 Pcre reg1('^[a-z]+?');
 Pcre reg2;
 reg2 = reg1;
 
.PP

.PP
Definition at line 153 of file pcre++.cc.
.PP
References _expression, _flags, case_t, and global_t.
.SS "const Pcre & Pcre::operator= (const std::string & expression)"
.PP
Operator =. 
.PP
\fBParameters:\fP
.RS 4
\fIexpression\fP a valid regular expression. 
.RE
.PP
\fBReturns:\fP
.RS 4
a new \fBPcre\fP object.
.RE
.PP
Example:
.PP
.PP
.nf

 Pcre regex = '(A+?)';
 
.PP

.PP
Definition at line 142 of file pcre++.cc.
.SS "std::string pcrepp::Pcre::operator[] (int index)\fC [inline]\fP"
.PP
Return substring of a match at a known possition using the array notation. This method throws an out-of-range exception if the given position is invalid. 
.PP
\fBParameters:\fP
.RS 4
\fIindex\fP the position of the substring to return. Identical to perl's $1..$n. 
.RE
.PP
\fBReturns:\fP
.RS 4
the substring at the given position.
.RE
.PP
Example: 
.PP
.nf

 
 std::string mysub = regex[1]; 
 
 

.PP
Get the first substring that matched the expression in the 'regex' object.
.PP
\fBSee also:\fP
.RS 4
std::string get_match(int pos) 
.RE
.PP

.PP
Definition at line 594 of file pcre++.h.
.PP
References get_match().
.SS "string Pcre::replace (const std::string & piece, const std::string & with)"
.PP
Replace parts of a string using regular expressions. This method is the counterpart of the perl s/// operator. It replaces the substrings which matched the given regular expression (given to the constructor) with the supplied string.
.PP
\fBParameters:\fP
.RS 4
\fIpiece\fP the string in which you want to search and replace. 
.br
\fIwith\fP the string which you want to place on the positions which match the expression (given to the constructor). 
.RE
.PP
Definition at line 51 of file replace.cc.
.PP
References __pcredebug, get_match_end(), get_match_start(), matched(), matches(), and search().
.SS "bool Pcre::search (const std::string & stuff, int OffSet)"
.PP
Do a search on the given string beginning at the given offset. This method does the actual search on the given string. 
.PP
\fBParameters:\fP
.RS 4
\fIstuff\fP the string in which you want to search for something. 
.br
\fIOffSet\fP the offset where to start the search. 
.RE
.PP
\fBReturns:\fP
.RS 4
boolean \fBtrue\fP if the regular expression matched. \fBfalse\fP if not. 
.RE
.PP
\fBSee also:\fP
.RS 4
bool \fBsearch(const std::string& stuff)\fP 
.RE
.PP
Definition at line 83 of file search.cc.
.SS "bool Pcre::search (const std::string & stuff)"
.PP
Do a search on the given string. This method does the actual search on the given string. 
.PP
\fBParameters:\fP
.RS 4
\fIstuff\fP the string in which you want to search for something. 
.RE
.PP
\fBReturns:\fP
.RS 4
boolean \fBtrue\fP if the regular expression matched. \fBfalse\fP if not. 
.RE
.PP
\fBSee also:\fP
.RS 4
bool \fBsearch(const std::string& stuff, int OffSet)\fP 
.RE
.PP
Definition at line 87 of file search.cc.
.PP
Referenced by replace().
.SS "bool Pcre::setlocale (const char * locale)"
.PP
Sets locale for all character operations Returns false if locale can't be set. Otherwise returns true 
.PP
\fBParameters:\fP
.RS 4
\fIlocale\fP locale alias name you want to use. 
.RE
.PP
\fBReturns:\fP
.RS 4
true if setting locale were successful
.RE
.PP
\fBSee also:\fP
.RS 4
locale(1) 
.RE
.PP
Definition at line 220 of file pcre++.cc.
.SS "vector< string > Pcre::split (const std::string & piece, std::vector< int > positions)"
.PP
split a string into pieces This method will split the given string into a vector of strings using the compiled expression (given to the constructor).
.PP
\fBParameters:\fP
.RS 4
\fIpiece\fP The string you want to split into it's parts. 
.br
\fIpositions\fP a std::vector<int> of positions, which the returned vector should contain. 
.RE
.PP
\fBReturns:\fP
.RS 4
an vector of strings 
.RE
.PP
\fBSee also:\fP
.RS 4
std::vector<std::string> \fBsplit(const std::string& piece)\fP 
.PP
std::vector<std::string> \fBsplit(const std::string& piece, int limit)\fP 
.PP
std::vector<std::string> \fBsplit(const std::string& piece, int limit, int start_offset)\fP 
.PP
std::vector<std::string> \fBsplit(const std::string& piece, int limit, int start_offset)\fP 
.PP
std::vector<std::string> 
.RE
.PP
Definition at line 151 of file split.cc.
.SS "vector< string > Pcre::split (const std::string & piece, int limit, int start_offset, int end_offset)"
.PP
split a string into pieces This method will split the given string into a vector of strings using the compiled expression (given to the constructor).
.PP
\fBParameters:\fP
.RS 4
\fIpiece\fP The string you want to split into it's parts. 
.br
\fIlimit\fP the maximum number of elements you want to get back from \fBsplit()\fP. 
.br
\fIstart_offset\fP at which substring the returned vector should start. 
.br
\fIend_offset\fP at which substring the returned vector should end. 
.RE
.PP
\fBReturns:\fP
.RS 4
an vector of strings 
.RE
.PP
\fBSee also:\fP
.RS 4
std::vector<std::string> \fBsplit(const std::string& piece)\fP 
.PP
std::vector<std::string> \fBsplit(const std::string& piece, int limit)\fP 
.PP
std::vector<std::string> \fBsplit(const std::string& piece, int limit, int start_offset)\fP 
.PP
std::vector<std::string> \fBsplit(const std::string& piece, std::vector<int> positions)\fP 
.PP
std::vector<std::string> 
.RE
.PP
Definition at line 147 of file split.cc.
.SS "vector< string > Pcre::split (const std::string & piece, int limit, int start_offset)"
.PP
split a string into pieces This method will split the given string into a vector of strings using the compiled expression (given to the constructor).
.PP
\fBParameters:\fP
.RS 4
\fIpiece\fP The string you want to split into it's parts. 
.br
\fIlimit\fP the maximum number of elements you want to get back from \fBsplit()\fP. 
.br
\fIstart_offset\fP at which substring the returned vector should start. 
.RE
.PP
\fBReturns:\fP
.RS 4
an vector of strings 
.RE
.PP
\fBSee also:\fP
.RS 4
std::vector<std::string> 
.PP
std::vector<std::string> \fBsplit(const std::string& piece)\fP 
.PP
std::vector<std::string> \fBsplit(const std::string& piece, int limit)\fP 
.PP
std::vector<std::string> \fBsplit(const std::string& piece, int limit, int start_offset, int end_offset)\fP 
.PP
std::vector<std::string> \fBsplit(const std::string& piece, std::vector<int> positions)\fP 
.RE
.PP
Definition at line 143 of file split.cc.
.SS "vector< string > Pcre::split (const std::string & piece, int limit)"
.PP
split a string into pieces This method will split the given string into a vector of strings using the compiled expression (given to the constructor).
.PP
\fBParameters:\fP
.RS 4
\fIpiece\fP The string you want to split into it's parts. 
.br
\fIlimit\fP the maximum number of elements you want to get back from \fBsplit()\fP. 
.RE
.PP
\fBReturns:\fP
.RS 4
an vector of strings 
.RE
.PP
\fBSee also:\fP
.RS 4
std::vector<std::string> 
.PP
std::vector<std::string> \fBsplit(const std::string& piece)\fP 
.PP
std::vector<std::string> \fBsplit(const std::string& piece, int limit, int start_offset)\fP 
.PP
std::vector<std::string> \fBsplit(const std::string& piece, int limit, int start_offset, int end_offset)\fP 
.PP
std::vector<std::string> \fBsplit(const std::string& piece, std::vector<int> positions)\fP 
.RE
.PP
Definition at line 139 of file split.cc.
.SS "vector< string > Pcre::split (const std::string & piece)"
.PP
split a string into pieces This method will split the given string into a vector of strings using the compiled expression (given to the constructor).
.PP
\fBParameters:\fP
.RS 4
\fIpiece\fP The string you want to split into it's parts. 
.RE
.PP
\fBReturns:\fP
.RS 4
an vector of strings 
.RE
.PP
\fBSee also:\fP
.RS 4
std::vector<std::string> 
.PP
std::vector<std::string> \fBsplit(const std::string& piece, int limit)\fP 
.PP
std::vector<std::string> \fBsplit(const std::string& piece, int limit, int start_offset)\fP 
.PP
std::vector<std::string> \fBsplit(const std::string& piece, int limit, int start_offset, int end_offset)\fP 
.PP
std::vector<std::string> \fBsplit(const std::string& piece, std::vector<int> positions)\fP 
.RE
.PP
Definition at line 135 of file split.cc.
.SS "void Pcre::study ()"
.PP
Analyze pattern for speeding up the matching process. When a pattern is going to be used several times, it is worth spending more time analyzing it in order to speed up the time taken for matching.
.PP
An excpetion will be thrown if analyzing the pattern failed. Definition at line 210 of file pcre++.cc.

.SH "Author"
.PP 
Generated automatically by Doxygen for PCRE++ from the source code.
